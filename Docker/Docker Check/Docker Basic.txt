Docker là nền tảng cho phép build, ship, run ứng dụng nhanh chóng trên nhiều nền tảng, mã nguồn mở. Nó triển khai các ứng dụng vào các container ảo hóa. Có 2 phiên bản CE cho nhóm nhỏ và EE cho doanh nghiệp. Tốc độ nhanh và Docker container rất nhẹ. Giảm delay giữa code và production. Setup môi trường tránh xung đột phiên bản cho app
Docker giúp build và run ứng dụng trên 1 môi trường cách ly là các container
Phần cứng -> HostOS -> Docker running -> các ứng dụng trên Container(App, library)
VM có 1 lớp ảo hóa phân chia tài nguyên máy host để tạo ra từng máy ảo, trên từng máy ảo cài và chạy các hđh khác nhau, cài đặt hay cấu trúc thư mục đều trên chính hđh máy ảo đó
Docker thì các ứng dụng chạy trên cùng hđh máy host, cài thêm cac bins/libs để giống như ứng dụng chạy trên hđh ảo, tài nguyên có thể chia sẻ với nhau trên cấu trúc thư mục

Vào trang chủ và tải docker về desktop.

Chạy Docker trên Host OS-> Để chạy 1 ứng dụng trên Docker, docker sẽ tạo ra 1 container cho 1 app đó. Đó là 1 container cách ly có đầy đủ thư viện và mọi thứ để chạy app.

So sánh với VM:
Chạy Hypervisor trên HostOS(phần mềm quản lý nhiều máy ảo)-> trên Hypervisor sẽ chạy nhiều máy ảo khác nhau, mỗi máy ảo là 1 hệ điều hành riêng. Nó làm bằng cách phân chia CPU ra làm nhiều phần cho từng máy ảo và càng nhiều máy ảo sẽ càng đốt CPU. Mỗi máy ảo có 1 hệ điều hành khác nhau và trong mỗi máy ảo là 1 môi trường đều có đấy đủ thư viện các thứ để chạy ứng dụng mà ta muốn chạy trên máy ảo đó. Các VM có thể chia sẻ tài nguyên cho nhau.
Còn Docker Engine chạy trên HostOS và trên nó sẽ có nhiều container. Chúng dùng chung hđh với HostOS nên tốc độ nhanh hơn và có thể chia sẻ tài nguyên cho nhau.

Để cài: kích hoạt chế độ hyper-v trên máy tính: chạy powershell quyền admin ->  Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -> tải Docker desktop -> cài
=> nếu k start được docker lỗi thì right click biểu tượng trên taskbar window -> switch to window container -> sẽ chỉ dùng được các image trong window
=> Khi install nó yêu cầu phải cài WSL(Windows Subsystem for Linux) vì Docker có 2 chế độ làm việc với Linux Container or Window Container. Ở trên win10 của ta k thể code linux nên k dùng được linux container, nếu muốn dùng phải tải WSL. Nhưng ta k cần vì có thể dùng luôn Window Container, tội gì.
Nếu start bị lỗi thiếu memory trong khi có đủ memory thì: vào settings-> Docker Engine -> chỉnh experimental là true và apply and restart.
Nếu chạy docker trên window thì có 1 số lệnh k hỗ trợ mà buộc dùng trên linux, VD ta k dùng được docker commit cái image thành file

Cái hyper v nhiều lúc bật nhưng docker éo nhận diện được phải tắt bật nhiều lần.
WSL2 là engine có thể dùng tốt hơn Hyper-V nhưng cài mất công ra, thg có trên linux thôi, trên window ta dùng luôn hyperv
restart mấy lần mới chuyển sang window container được

Mở docker desktop ra và mở window shell để thao tác với docker qua command:
docker -- version
docker info
docker => liệt kê lệnh con
docker <lệnh> --help 

Trong docker có các image là đóng gói các phần mềm. Có nhiều loại image trong docker có vai trò đóng gói các phần mềm khác nhau. VD image đóng gói phần mềm PHP, image đóng gói hđh ubuntu,.. Khi chạy các phần mềm được các image đóng gói sẽ tạo ra các container, mỗi phần mềm là 1 container. Các image chỉ đọc và k thể sửa đổi

docker images => liệt kê image đang có. Mặc định là ta có thể dùng mọi image trong kho chứa công cộng của docker hub. Có thể tìm để dùng các image có sẵn trong hub.docker.com
docker search <tên image muốn tìm> => search đc trên terminal nên dùng các phiên bản official
docker pull <tên image>:<tên phiên bản> => tên phiên bản xem trên hub.docker.com phần tag
docker pull <tên image> => k có tag phiên bản or tag là :latest sẽ tự tải về phiên bản mới nhất
docker image rm ubuntu:16.04 => xóa image đã có
docker image rm <id của image muốn xóa chỉ cần vài chữ cái đầu> -> xóa image. Image tạo ra container mà container đang chạy thì k xóa image đó được mà phải thêm tham số -f
docker run -it --name "<tên đặt cho container>" --rm -h <tên host container đó> ubuntu:<phiên bản> <lệnh> <tham số của lệnh> => thì lệnh và tham số là lệnh mà ta muốn khi image chạy và có 1 contaienr hoạt động thì nó sẽ thực hiện luôn lệnh nào thì thêm vào sau như v. Option -i là interact được với container, -t là tương tác bằng terminal. -rm là option giúp container tự bị remove ngay khi chạy xong lệnh run. Ta thêm nó khi chỉ cần chạy container đó thực hiện lệnh đó đúng 1 lần
docker ps -a => hiển thị containers đang chạy. Nếu thêm -a sẽ hiện mọi container kể cả container đã tắt
docker start <id or tên của container> -> chạy 1 container đã exit trước đó(chưa xóa)
docker attach <id or tên container> -> vào lại terminal tương tác của container đang chạy
docker stop <id or tên container> -> container đang chạy sẽ dừng lại
docker rm <id or tên container> -> xóa 1 container đã exit
docker rm -f <id or tên container> -> xóa 1 container dù đang chạy hay không
docker exec <tên container đang chạy> <lệnh muốn chạy trên container đó> -> chạy lệnh trên container ở ngoài máy host(k cần vào terminal container đó)
docker exec -it <tên container> bash => lệnh bash thực chất là mở terminal 1 tiến trình khác giống attach ở đây. Nếu từ cái này mà exit thì container vẫn hoạt động vì nó chạy 2 tiến trình bash cùng tên và mới exit 1 cái còn 1 cái chạy bởi hàm run vẫn đang chạy
docker commit <tên or id container> <tên image tự đặt>:<tên version tự đặt> -> Trong 1 container mà ta cài nhiều thứ xong mỗi lần xóa thì container đó mất or exit xong tắt máy thì container cx mất, ta có thể lưu nó thành image fix trong docker để lần sau chạy image đã lưu đó là có luôn container đó mà kp làm lại. Lệnh commit sẽ lưu container thành images và chạy docker images sẽ thấy images mới đó.
docker save --output <link tới file>/<tên file tự đặt>.tar <id or tên image> -> biến image thành file riêng k lưu trong docker nx, có thể share cho người khác file
docker load -i <link tới file image>.tar => load file thành image k có tên và tag
docker tag <id của image> <tên tự đặt>:<tag tự đăt> => đặt tên và tag cho image
docker run -it -v <path tới folder chứa file của host os muốn container tương tác với>:<path của nó tương ứng trên container> --name "<tên đặt cho container>" <id của image> -> VD: docker run -it -v /Users/Desktop/folder:/home/folder ff85 thì cái container được tạo ra từ image có id bắt đầu bằng ff85 sẽ có thư mục home/folder và bên trong có content y hệt content trên thư mục desktop/folder của máy host. Mọi sửa đổi của container trên folder thì folder của host cũng tự cập nhập ngay lập tức kể cả có xóa container về sau
docker run -it --name "<tên đặt cho container2>" --volumns-from <tên container1> <tên image>:<tag> => chạy 1 image tạo container2 có cấu trúc thư mục của container1 và đồng bộ trực tiếp. Thao tác với file bên này thì bên kia cũng đổi theo
docker volume ls -> liệt kê các ổ đĩa. Docker cho phép ta tạo ra các ổ đĩa ảo gắn vào các container để chúng thao tác chung với dữ liệu ổ đĩa đó. Ổ đĩa chỉ mất khi ta chủ động xóa ổ đĩa.
docker volume create <tên ổ đĩa> -> tạo ổ đĩa
docker volume inspect <tên ổ đĩa> -> xem thông tin ổ đĩa nào
docker volume rm <tên ổ đĩa>
docker run -it --name "<tên>" source=<tên ổ đĩa>,target=/home/disk2 ubuntu:latest => chạy image tạo ra container có thư mục /home/disk2 kết nối với ổ đĩa ảo có từ trc. Mọi thao tác trên container này sẽ ảnh hưởng tới ổ đĩa trên và dù xóa container thì ổ đĩa vẫn có dữ liệu mới nhất sửa đổi
docker volume create -opt device=/User/...<path trên máy host> -opt type=none -opt o=bind <tên ổ đĩa tự đặt> => tạo ổ đĩa ánh xạ đến ổ đĩa trên host. Với các ổ đĩa mà đã ánh xạ tới ổ trong host thì khi ánh xạ ổ đĩa đó tới container ta dùng -v chứ k dùng source target nx=> docker run -it -v <tên ổ đĩa>:/<link trong container có ổ đĩa này> ubuntu:lastest => khi đó container đó sẽ ánh xạ tới cả ổ đĩa host và ổ đĩa ảo
docker image history <id or tên image> -> hiển thị quá trình hình thành images này từ image cơ sở
docker inspect <tên or id image or container> -> hiển thị chi tiết 1 image or container
docker diff <tên or id container> -> từ thời điểm tạo ra cho đến h thì container này đã thay đổi cấu trúc file như thế nào vì dùng các container ta cứ cài nh thứ làm thư mục nó thay đổi
docker logs --tail 10 <tên container> -> kiểm tra 10 dòng logs cuối của container nào
docker logs -f <tên or id container> -> terminal sẽ chờ thao tác gì đó với container này thì logs sẽ bắt theo thời gian thực
docker stats <container> <container> -> giám sát tài nguyên mà các container tiêu tốn thời gian thực. Nếu k liệt kê container nó sẽ tự giám sát tất cả

Sau khi chạy container thì môi trường terminal chính là nơi ta có thể tương tác với container đó. VD nếu chạy image ubuntu thì ta có thể dùng các lệnh của ubuntu ở trên container đó: 
cat /etc/*release -> hiển thị thông tin container hiện tại
exit => dừng container và thoát, dừng cái tiến trình đó thôi nếu chạy bash thì container vẫn chạy ở tiến trình khác
CTRL+P, CTRL+Q -> thoát terminal của container nhưng k tắt container
apt update -y -> 1 số lệnh trong ubuntu phải update mới có
apt search <tên gói> -> search package để install.

apt install htop -> htop -> in ra các tiến trình đang chạy trong 1 containers. VD ta run xong lại exec bash thì có tổng 3 tiến trình đang chạy, 1 là run ban đầu, 2 là bash chạy trên 1 tiến trình mới kết nối với terminal của ta, 3 là lệnh htop đang dùng
apt install iputils-ping -> ping google.com -> lệnh ping
=> tương tự các package của container ta có thể tự do cài trên docker VD nếu dùng ubuntu có thể cài vim, nano,... Cứ lệnh nào của linux mà k có thì install vào. VD: apt install vim


Dùng dockerfile, dùng docker build để tạo image myimage:v1 từ image có sẵn centos, cài sẵn vài package htop, vim, httpd và thi hành nền httpd khi container chạy:
docker pull centos -> docker run -it --name cent centos -> yum update là lệnh update để có thể cài các gói vào centos -> yum install httpd httpd-tools -y -> httpd -v để check có httpd chưa -> yum install vim => dùng dockerfile tạo image xong thì run nó để chạy container từ image đó
htop là lệnh nằm trong các gói package mở rộng mà ta phải cài gói trước: yum install epel-release -> yum update -y vì cài xong gói mở rộng phải update lại -> yum install htop -y -> htop
Thêm task là copy thư mục test.html ở trong máy vào trong 1 thư mục ở trong container => thoát ra terminal của host. Trong window bị lỗi deamon phải exit container rồi dùng cp rồi lại start container lại mới được. Ở TH này window container vẫn cho copy file nhưng thư mục trên container phải tạo hết từ trước nếu không sẽ báo lỗi directory k tồn tại: 
docker cp <link tới file(window phải dùng folder) test>.html <tên container>:<link trên container các thư mục phải có từ trước>
VD: docker cp ./MyImages/test.html cent:/var/www/html/
(Nếu docker cp ./MyImages/test.html cent:/var/www/html/ thì copy file test.html vào thư mục html. Còn docker cp ./MyImages/test.html cent:/var/www/html là sinh ra file html ở trong thư mục www có nội dung giống file test.html-> cần tránh nhâm điều này)
Chú ý 1 container chạy httpd và 1 container như centos cài package httpd hơi khác nhau. 1 cái là container chạy máy chủ web biên dịch html, js còn 1 cái là trong 1 hệ điều hành ta lại chạy 1 máy chủ web trên nó. Ở đây centos chạy httpd thì cổng 80 của cái centos đó chính là chạy httpd đó
Để lưu thành image: exit dừng container -> docker commit cent myimage:v1 -> có thể xóa container cent k cần nx -> chạy container từ myimage: docker run --rm -p 9876:80 myimage:v1 httpd -D FOREGROUND  => thì -rm vì khi nào dừng là xóa container luôn, -D là để nó chạy nền, mở browser cổng 9876 là vào được httpd-> các thư mục ta copy nó sẽ tự tìm đến file đó và lấy nên ta mở /test.html sẽ thấy
=> Vc ta xây dựng myimage thủ công thế này có thể nhét vào trong dockerfile r khi cần thì docker sẽ tự chạy file đó tạo ra image cho ta luôn: tạo Dockerfile -> tải extension Dockerfile về để có highlight cú pháp -> code Dockerfile -> docker build -t <tên image k được viết hoa>:<tag> Dockerfile <link tới docker file> => thế là có image. Giả sử tạo lại image như bên trên thì ta chạy container nó tự có thư mục mặc định chứa test.html và chạy httpd sẵn r nên ta chỉ cần: docker run -p 6789:80 myimage:v1 => bật máy tính cổng 6789 ra để thấy file test.html
=> Window bị lỗi với Dockerfille với mọi lệnh RUN. Cho đến h chưa ai fix đc.

Các lệnh ở phần cuối:
docker cp <link tới file(window phải dùng folder) test>.html <tên container>:<link trên container các thư mục phải có từ trước>
docker run --rm -p 9876:80 myimage:v1 httpd -D FOREGROUND
docker run -p 6789:80 myimage:v1 => khi docker file chạy sẵn httpd rồi
